name: Deploy to GitHub Pages

permissions:
  contents: write
  pages: write
  id-token: write

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        run: |
          # Baixa o código usando curl e tar
          mkdir -p $GITHUB_WORKSPACE/repo
          curl -sL https://github.com/${{ github.repository }}/archive/refs/heads/${{ github.ref_name }}.tar.gz | tar xz --strip-components=1 -C $GITHUB_WORKSPACE/repo
          cd $GITHUB_WORKSPACE/repo
          
      - name: Setup Node.js
        run: |
          # Instala o Node.js usando o gerenciador de pacotes do Ubuntu
          curl -fsSL https://deb.nodesource.com/setup_18.x | bash -
          apt-get install -y nodejs
          
      - name: Install dependencies
        run: |
          cd $GITHUB_WORKSPACE/repo
          npm ci --no-audit --prefer-offline
          
      - name: Build
        working-directory: $GITHUB_WORKSPACE/repo
        env:
          FIREBASE_API_KEY: ${{ secrets.FIREBASE_API_KEY }}
          FIREBASE_AUTH_DOMAIN: ${{ secrets.FIREBASE_AUTH_DOMAIN }}
          FIREBASE_PROJECT_ID: ${{ secrets.FIREBASE_PROJECT_ID }}
          FIREBASE_STORAGE_BUCKET: ${{ secrets.FIREBASE_STORAGE_BUCKET }}
          FIREBASE_MESSAGING_SENDER_ID: ${{ secrets.FIREBASE_MESSAGING_SENDER_ID }}
          FIREBASE_APP_ID: ${{ secrets.FIREBASE_APP_ID }}
          FIREBASE_MEASUREMENT_ID: ${{ secrets.FIREBASE_MEASUREMENT_ID }}
        run: |
          npm run build
          touch dist/.nojekyll
          
      - name: Setup Git
        run: |
          apt-get update
          apt-get install -y git
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          
      - name: Deploy to gh-pages
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
          BRANCH: gh-pages
        run: |
          # Clona o repositório em um diretório temporário
          TEMP_DIR=$(mktemp -d)
          git clone --depth=1 --branch=$BRANCH https://x-access-token:$GITHUB_TOKEN@github.com/$REPO.git $TEMP_DIR 2>/dev/null || git init $TEMP_DIR
          
          # Entra no diretório temporário e configura o branch
          cd $TEMP_DIR
          git checkout -b $BRANCH 2>/dev/null || git checkout --orphan $BRANCH
          
          # Remove todos os arquivos existentes, exceto .git
          find . -maxdepth 1 ! -name '.git' -type d -exec rm -rf {} +
          find . -maxdepth 1 ! -name '.git' -type f -delete
          
          # Copia os arquivos de build
          cp -r $GITHUB_WORKSPACE/repo/dist/* .
          
          # Configura o git e faz o push
          git remote add origin https://x-access-token:$GITHUB_TOKEN@github.com/$REPO.git
          git add -A
          git commit -m "Deploy para GitHub Pages" --allow-empty
          git push origin $BRANCH --force
